//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataBase
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataBase.DataBaseSoap")]
    public interface DataBaseSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ValidationUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> ValidationUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> GetStatusAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFixedAssets", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<DataBase.ArrayOfXElement> GetFixedAssetsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFixedAssetsByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<DataBase.ArrayOfXElement> GetFixedAssetsByIDAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDepartments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<DataBase.ArrayOfXElement> GetDepartmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDepartmentsByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<DataBase.ArrayOfXElement> GetDepartmentsByIDAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertFixedAsset", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task InsertFixedAssetAsync(string assetName, string departmentID, string usefulLife, string price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertDepartment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task InsertDepartmentAsync(string departmentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task InsertUsersAsync(string userName, string password, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateFixedAsset", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task UpdateFixedAssetAsync(string assetId, string assetName, string departmentID, string amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteFixedAsset", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task DeleteFixedAssetAsync(string assetId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface DataBaseSoapChannel : DataBase.DataBaseSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class DataBaseSoapClient : System.ServiceModel.ClientBase<DataBase.DataBaseSoap>, DataBase.DataBaseSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DataBaseSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(DataBaseSoapClient.GetBindingForEndpoint(endpointConfiguration), DataBaseSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DataBaseSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DataBaseSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DataBaseSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DataBaseSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DataBaseSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> ValidationUserAsync(string username, string password)
        {
            return base.Channel.ValidationUserAsync(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> GetStatusAsync(string username)
        {
            return base.Channel.GetStatusAsync(username);
        }
        
        public System.Threading.Tasks.Task<DataBase.ArrayOfXElement> GetFixedAssetsAsync()
        {
            return base.Channel.GetFixedAssetsAsync();
        }
        
        public System.Threading.Tasks.Task<DataBase.ArrayOfXElement> GetFixedAssetsByIDAsync(string id)
        {
            return base.Channel.GetFixedAssetsByIDAsync(id);
        }
        
        public System.Threading.Tasks.Task<DataBase.ArrayOfXElement> GetDepartmentsAsync()
        {
            return base.Channel.GetDepartmentsAsync();
        }
        
        public System.Threading.Tasks.Task<DataBase.ArrayOfXElement> GetDepartmentsByIDAsync(string id)
        {
            return base.Channel.GetDepartmentsByIDAsync(id);
        }
        
        public System.Threading.Tasks.Task InsertFixedAssetAsync(string assetName, string departmentID, string usefulLife, string price)
        {
            return base.Channel.InsertFixedAssetAsync(assetName, departmentID, usefulLife, price);
        }
        
        public System.Threading.Tasks.Task InsertDepartmentAsync(string departmentName)
        {
            return base.Channel.InsertDepartmentAsync(departmentName);
        }
        
        public System.Threading.Tasks.Task InsertUsersAsync(string userName, string password, string status)
        {
            return base.Channel.InsertUsersAsync(userName, password, status);
        }
        
        public System.Threading.Tasks.Task UpdateFixedAssetAsync(string assetId, string assetName, string departmentID, string amount)
        {
            return base.Channel.UpdateFixedAssetAsync(assetId, assetName, departmentID, amount);
        }
        
        public System.Threading.Tasks.Task DeleteFixedAssetAsync(string assetId)
        {
            return base.Channel.DeleteFixedAssetAsync(assetId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DataBaseSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.DataBaseSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DataBaseSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://bluemedicalws.azurewebsites.net/DataBase.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.DataBaseSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://bluemedicalws.azurewebsites.net/DataBase.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            DataBaseSoap,
            
            DataBaseSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.0.2")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
